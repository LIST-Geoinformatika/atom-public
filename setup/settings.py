"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from datetime import timedelta
import dj_database_url
from .env import BASE_DIR, ENV_BOOL, ENV_LIST, ENV_NUM, ENV_STR, PARDIR  # noqa

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV_STR("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = ENV_BOOL("DEBUG")

ALLOWED_HOSTS = ENV_LIST("ALLOWED_HOSTS", ",", ["*"] if DEBUG else [])

CSRF_TRUSTED_ORIGINS = ENV_LIST("CSRF_TRUSTED_ORIGINS", ",", [])

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = ENV_LIST("CORS_ALLOWED_ORIGINS", ",", [])

# HTTP -> HTTPS
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Frontend
FRONTEND_URL = ENV_STR("FRONTEND_URL")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "django.contrib.sites",
    # 3rd party:
    "corsheaders",
    "rest_framework",
    "django_filters",
    "channels",
    "drf_yasg",
    "leaflet",
    "django_prometheus",
    # Custom apps:
    "user",
    "webhook",
    "inspire",
]

SITE_ID = 1

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "setup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # `allauth` needs this from django
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "setup.wsgi.application"

# Django Channels
ASGI_APPLICATION = "setup.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(ENV_STR("REDIS_HOST"), ENV_NUM("REDIS_PORT", 6379))],
        },
    },
}

CHANNEL_NAME_RSS = ENV_STR("CHANNEL_NAME_RSS", "inspire-rss")


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {"default": dj_database_url.config()}

AUTH_USER_MODEL = "user.User"

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
]

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Substituting a custom User model
AUTH_USER_MODEL = "user.User"

# Define DRF settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
}


# # # AUTH SETTINGS

# Force email based auth

# Custom auth variables
AUTH_AUTHENTICATION_METHOD = "email"  # Options: username | email | username_email
AUTH_EMAIL_REQUIRED = True
AUTH_USERNAME_REQUIRED = False  # Require username in registration
AUTH_EMAIL_VERIFICATION = "mandatory"  # <mandatory|optional|None>
AUTH_ACCESS_TOKEN_NAME = "access"  # set access token name
AUTH_REFRESH_TOKEN_NAME = "refresh"  # set access token name

# Simple JWT config

SIMPLE_JWT = {
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=ENV_NUM("JWT_REFRESH_TOKEN_LIFETIME_DAYS", 15)
    ),
    "ROTATE_REFRESH_TOKENS": True,
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=15 * 24 * 60
        if ENV_BOOL("DEBUG") is True
        else ENV_NUM("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", 5)
    ),
    "AUTH_COOKIE_SECURE": True,
    "AUTH_COOKIE_SAMESITE": "None",
    "AUTH_COOKIE_HTTP_ONLY": True,
}

# API docs
SHOW_API_DOCS = ENV_BOOL("SHOW_API_DOCS", True)

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "hr"

TIME_ZONE = "Europe/Zagreb"

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

# Available languages
LANGUAGES = [
    ("hr", ("Croatian")),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# folder containing static files for production purposes (manage.py collectstatic)
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# static files for each app
STATIC_URL = ENV_STR("STATIC_URL", "/api/static/")

# static files directories for each app
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "user/static"),
]

# Media Folder
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = ENV_STR("MEDIA_URL", "/api/media/")

# RSS settings
RSS_DIR = ENV_STR("RSS_DIR", os.path.join(BASE_DIR, "rss"))
RSS_URL = ENV_STR("RSS_DIR", "/api/rss/")

# # # Email and support settings # # #

ADMIN_EMAIL = ENV_STR("ADMIN_EMAIL")
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = ENV_STR("EMAIL_HOST", "smtp.office365.com")
EMAIL_USE_TLS = ENV_BOOL("EMAIL_USER_TLS", True)
EMAIL_PORT = ENV_NUM("EMAIL_PORT", 587)
EMAIL_HOST_USER = ENV_STR("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = ENV_STR("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = ENV_STR("DEFAULT_FROM_EMAIL")
EMAIL_USE_SSL = ENV_BOOL("EMAIL_USER_TLS", False)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Leaflet config for admin site
LEAFLET_CONFIG = {
    "SPATIAL_EXTENT": (13.273130, 46.961542, 19.877498, 41.954775),
    # 'DEFAULT_CENTER': (16.5166646, 43.7333304),
    # 'DEFAULT_ZOOM': 11,
    "MIN_ZOOM": 6,
    "MAX_ZOOM": 20,
    "DEFAULT_PRECISION": 6,
}


# # # LOGGING

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {message}", "style": "{"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}


PROJ_LIB = ENV_STR("PROJ_LIB", None)
GDAL_DATA = ENV_STR("GDAL_DATA", None)

if PROJ_LIB:
    os.environ["PROJ_LIB"] = PROJ_LIB

if GDAL_DATA:
    os.environ["GDAL_DATA"] = GDAL_DATA

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
        },
    },
    "USE_SESSION_AUTH": False,
    "JSON_EDITOR": True,  # Enable the JSON editor for request/response bodies
}

# TEMP DIR
TEMP_DIR = os.path.join(BASE_DIR, "temp")

# DATA DIR
DATA_URL = "/data/"
DATA_DIR = os.path.join(BASE_DIR, "data")
